import sqlite3from datetime import datetimefrom tkinter import ttk, messageboximport customtkinter as ctk# ---------------------- Base de Datos ----------------------# noinspection SqlNoDataSourceInspectiondef init_db():    conn = sqlite3.connect("estacionamiento.db")    c = conn.cursor()    c.execute('''CREATE TABLE IF NOT EXISTS ingresos                 (                     id                     INTEGER                     PRIMARY                     KEY                     AUTOINCREMENT,                     patente                     TEXT,                     hora_ingreso                     TEXT,                     hora_salida                     TEXT,                     monto                     REAL,                     dia_trabajo                     TEXT                 )''')    c.execute('''CREATE TABLE IF NOT EXISTS mensuales                 (                     id                     INTEGER                     PRIMARY                     KEY                     AUTOINCREMENT,                     nombre                     TEXT,                     apellido                     TEXT,                     direccion                     TEXT,                     telefono                     TEXT,                     marca                     TEXT,                     modelo                     TEXT,                     patente                     TEXT,                     fecha_ingreso                     TEXT                 )''')    c.execute('''CREATE TABLE IF NOT EXISTS configuracion    (        id        INTEGER        PRIMARY        KEY        CHECK                 (        id=        1                 ),        tarifa_hora REAL,        tarifa_dia REAL,        tarifa_semana REAL,        tarifa_mes REAL,        cocheras_totales INTEGER)''')    c.execute('''CREATE TABLE IF NOT EXISTS dias_trabajo                 (                     id                     INTEGER                     PRIMARY                     KEY                     AUTOINCREMENT,                     fecha_inicio                     TEXT,                     fecha_fin                     TEXT,                     estado                     TEXT                 )''')    # Configuraci√≥n por defecto si no existe    c.execute("SELECT COUNT(*) FROM configuracion")    if c.fetchone()[0] == 0:        c.execute(            "INSERT INTO configuracion (id, tarifa_hora, tarifa_dia, tarifa_semana, tarifa_mes, cocheras_totales) VALUES (1, 100, 500, 2000, 6000, 20)")    conn.commit()    conn.close()def get_config():    conn = sqlite3.connect("estacionamiento.db")    c = conn.cursor()    c.execute("SELECT tarifa_hora, tarifa_dia, tarifa_semana, tarifa_mes, cocheras_totales FROM configuracion LIMIT 1")    config = c.fetchone()    conn.close()    return configdef contar_cocheras_ocupadas():    conn = sqlite3.connect("estacionamiento.db")    c = conn.cursor()    c.execute("SELECT COUNT(*) FROM ingresos WHERE hora_salida IS NULL")    ocupadas = c.fetchone()[0]    conn.close()    return ocupadasdef verificar_dia_iniciado():    """Verifica si hay un d√≠a de trabajo iniciado"""    conn = sqlite3.connect("estacionamiento.db")    c = conn.cursor()    c.execute("SELECT id, fecha_inicio FROM dias_trabajo WHERE estado='activo' LIMIT 1")    result = c.fetchone()    conn.close()    return resultdef iniciar_dia():    """Inicia un nuevo d√≠a de trabajo"""    # Verificar si ya hay un d√≠a activo    dia_activo = verificar_dia_iniciado()    if dia_activo:        return False, "Ya hay un d√≠a de trabajo activo"    conn = sqlite3.connect("estacionamiento.db")    c = conn.cursor()    fecha_actual = datetime.now().strftime("%Y-%m-%d %H:%M:%S")    c.execute("INSERT INTO dias_trabajo (fecha_inicio, estado) VALUES (?, 'activo')", (fecha_actual,))    conn.commit()    conn.close()    return True, "D√≠a de trabajo iniciado correctamente"def terminar_dia():    """Termina el d√≠a de trabajo activo"""    dia_activo = verificar_dia_iniciado()    if not dia_activo:        return False, "No hay un d√≠a de trabajo activo"    conn = sqlite3.connect("estacionamiento.db")    c = conn.cursor()    fecha_actual = datetime.now().strftime("%Y-%m-%d %H:%M:%S")    c.execute("UPDATE dias_trabajo SET fecha_fin=?, estado='cerrado' WHERE id=?",              (fecha_actual, dia_activo[0]))    conn.commit()    conn.close()    return True, "D√≠a de trabajo terminado correctamente"# ---------------------- App ----------------------class EstacionamientoApp:    def __init__(self, root):        self.root = root        self.root.title("Sistema de Estacionamiento")        ancho = self.root.winfo_screenwidth()        alto = self.root.winfo_screenheight()        self.root.geometry(f"{ancho}x{alto}+0+0")        # Configurar tema        ctk.set_appearance_mode("light")        ctk.set_default_color_theme("blue")        # Configurar grid para responsividad        self.root.grid_rowconfigure(0, weight=1)        self.root.grid_columnconfigure(0, weight=1)        self.frame_actual = None        self.mostrar_menu_principal()        # Bind para redimensionar        self.root.bind("<Configure>", self.on_window_resize)    def on_window_resize(self, event):        # Solo reaccionar a cambios de la ventana principal        if event.widget == self.root and hasattr(self, 'botones_container'):            self.actualizar_layout_botones()    def limpiar_frame(self):        if self.frame_actual:            self.frame_actual.destroy()    def mostrar_menu_principal(self):        self.limpiar_frame()        # Frame principal con padding        self.frame_actual = ctk.CTkFrame(self.root, corner_radius=0, fg_color="#f8f9fa")        self.frame_actual.grid(row=0, column=0, sticky="nsew", padx=10, pady=10)        self.frame_actual.grid_rowconfigure(3, weight=1)        self.frame_actual.grid_columnconfigure(0, weight=1)        # Frame superior con t√≠tulo y bot√≥n de d√≠a de trabajo        header_frame = ctk.CTkFrame(self.frame_actual, fg_color="transparent")        header_frame.grid(row=0, column=0, sticky="ew", pady=(20, 10))        header_frame.grid_columnconfigure(0, weight=1)        # T√≠tulo centrado        ctk.CTkLabel(            header_frame,            text="Estacionamiento",            font=("Arial", 48, "bold"),            text_color="#2c3e50"        ).grid(row=0, column=0)        # Bot√≥n de control de d√≠a en la esquina superior derecha        dia_activo = verificar_dia_iniciado()        if dia_activo:            btn_text = "üî¥ Terminar D√≠a"            btn_color = "#f44336"            btn_hover = "#d32f2f"            btn_command = self.terminar_dia_trabajo        else:            btn_text = "üü¢ Iniciar D√≠a"            btn_color = "#4CAF50"            btn_hover = "#388E3C"            btn_command = self.iniciar_dia_trabajo        self.btn_dia = ctk.CTkButton(            header_frame,            text=btn_text,            command=btn_command,            font=("Arial", 14, "bold"),            fg_color=btn_color,            hover_color=btn_hover,            width=140,            height=35        )        self.btn_dia.grid(row=0, column=1, sticky="ne", padx=(10, 20))        # Estado del d√≠a        estado_frame = ctk.CTkFrame(self.frame_actual, fg_color="transparent")        estado_frame.grid(row=1, column=0, sticky="ew", pady=(0, 10))        estado_frame.grid_columnconfigure(0, weight=1)        if dia_activo:            fecha_inicio = datetime.strptime(dia_activo[1], "%Y-%m-%d %H:%M:%S")            estado_text = f"üü¢ D√≠a iniciado: {fecha_inicio.strftime('%d/%m/%Y %H:%M')}"            estado_color = "#4CAF50"        else:            estado_text = "üî¥ D√≠a de trabajo no iniciado"            estado_color = "#f44336"        ctk.CTkLabel(            estado_frame,            text=estado_text,            font=("Arial", 16),            text_color=estado_color        ).grid(row=0, column=0)        # Informaci√≥n de cocheras        config = get_config()        ocupadas = contar_cocheras_ocupadas()        disponibles = config[4] - ocupadas        info_frame = ctk.CTkFrame(self.frame_actual, fg_color="transparent")        info_frame.grid(row=2, column=0, sticky="ew", pady=(0, 20))        info_frame.grid_columnconfigure(0, weight=1)        ctk.CTkLabel(            info_frame,            text=f"Cocheras disponibles: {disponibles}/{config[4]}",            font=("Arial", 24),            text_color="#34495e"        ).grid(row=0, column=0)        # Contenedor de botones responsive        self.botones_container = ctk.CTkFrame(self.frame_actual, fg_color="transparent")        self.botones_container.grid(row=3, column=0, sticky="nsew", padx=20, pady=20)        # Configurar grid del contenedor        for i in range(3):            self.botones_container.grid_rowconfigure(i, weight=1)            self.botones_container.grid_columnconfigure(i, weight=1)        # Crear botones (corregido: Facturaci√≥n e Informes separados)        self.botones_data = [            ("Entrada", self.mostrar_ingreso, "üöó‚Üë", "#4CAF50"),            ("Salida", self.mostrar_egreso, "üöó‚Üí", "#FF5722"),            ("Cocheras", self.mostrar_mensuales, "üÖøÔ∏è", "#2196F3"),            ("Facturaci√≥n", self.mostrar_facturacion, "üßæ", "#FF9800"),            ("Informes", self.mostrar_historial, "üìä", "#9C27B0"),            ("Configuraci√≥n", self.mostrar_configuracion, "‚öôÔ∏è", "#607D8B")        ]        self.botones = []        self.crear_botones()        self.actualizar_layout_botones()    def iniciar_dia_trabajo(self):        """Maneja el inicio del d√≠a de trabajo"""        exito, mensaje = iniciar_dia()        if exito:            messagebox.showinfo("D√≠a Iniciado", mensaje)            self.mostrar_menu_principal()  # Actualizar vista        else:            messagebox.showwarning("Advertencia", mensaje)    def terminar_dia_trabajo(self):        """Maneja el fin del d√≠a de trabajo"""        # Verificar si hay veh√≠culos sin salir        ocupadas = contar_cocheras_ocupadas()        if ocupadas > 0:            respuesta = messagebox.askyesno(                "Veh√≠culos sin salir",                f"Hay {ocupadas} veh√≠culo(s) que a√∫n no han salido.\n\n"                "¬øEst√° seguro de terminar el d√≠a de trabajo?"            )            if not respuesta:                return        exito, mensaje = terminar_dia()        if exito:            messagebox.showinfo("D√≠a Terminado", mensaje)            self.mostrar_menu_principal()  # Actualizar vista        else:            messagebox.showwarning("Advertencia", mensaje)    def crear_botones(self):        for i, (texto, comando, icono, color) in enumerate(self.botones_data):            btn = ctk.CTkButton(                self.botones_container,                text="",  # Inicialmente vac√≠o, se configura en actualizar_layout                font=("Arial", 20, "bold"),                corner_radius=20,                fg_color=color,                hover_color=self.darken_color(color),                command=comando,                border_width=2,                border_color="#ffffff"            )            self.botones.append((btn, texto, icono))    def darken_color(self, hex_color):        """Oscurece un color hex para el efecto hover"""        hex_color = hex_color.lstrip('#')        rgb = tuple(int(hex_color[i:i + 2], 16) for i in (0, 2, 4))        darker_rgb = tuple(max(0, int(c * 0.8)) for c in rgb)        return f"#{darker_rgb[0]:02x}{darker_rgb[1]:02x}{darker_rgb[2]:02x}"    def actualizar_layout_botones(self):        # Limpiar grid actual        for btn, _, _ in self.botones:            btn.grid_remove()        # Obtener dimensiones de la ventana        width = self.root.winfo_width()        height = self.root.winfo_height()        # Determinar layout basado en la relaci√≥n aspecto        if width > height * 1.2:  # Modo horizontal            filas, columnas = 2, 3            btn_width, btn_height = 180, 140        else:  # Modo vertical            filas, columnas = 3, 2            btn_width, btn_height = 160, 120        # Posicionar botones        for i, (btn, texto, icono) in enumerate(self.botones):            fila = i // columnas            columna = i % columnas            # Configurar texto del bot√≥n seg√∫n el layout            if width > height * 1.2:                btn_text = f"{icono}\n{texto}"                font_size = 24            else:                btn_text = f"{icono}\n{texto}"                font_size = 24            btn.configure(                text=btn_text,                width=btn_width,                height=btn_height,                font=("Arial", font_size, "bold")            )            btn.grid(                row=fila,                column=columna,                padx=15,                pady=15,                sticky="nsew"            )    # ---------------------- Ingreso ----------------------    def mostrar_ingreso(self):        # Verificar d√≠a iniciado        if not verificar_dia_iniciado():            messagebox.showwarning("D√≠a no iniciado", "Debe iniciar el d√≠a de trabajo antes de registrar ingresos")            return        self.limpiar_frame()        self.frame_actual = ctk.CTkFrame(self.root, corner_radius=0, fg_color="#f8f9fa")        self.frame_actual.grid(row=0, column=0, sticky="nsew", padx=20, pady=20)        self.frame_actual.grid_rowconfigure(2, weight=1)        self.frame_actual.grid_columnconfigure(0, weight=1)        # T√≠tulo        ctk.CTkLabel(            self.frame_actual,            text="üöó‚Üë Ingreso de Veh√≠culos",            font=("Arial", 32, "bold"),            text_color="#2c3e50"        ).grid(row=0, column=0)        # Frame del formulario        frame_form = ctk.CTkFrame(self.frame_actual, corner_radius=15)        frame_form.grid(row=1, column=0, pady=10, padx=20, sticky="ew")        frame_form.grid_columnconfigure(1, weight=1)        ctk.CTkLabel(frame_form, text="Patente:", font=("Arial", 16)).grid(row=0, column=0, padx=20, pady=15,                                                                           sticky="w")        entry_patente = ctk.CTkEntry(frame_form, font=("Arial", 14), height=35)        entry_patente.grid(row=0, column=1, padx=10, pady=15, sticky="ew")        def registrar_ingreso():            patente = entry_patente.get().upper().strip()            if patente:                # Verificar si ya est√° en el estacionamiento                conn = sqlite3.connect("estacionamiento.db")                c = conn.cursor()                c.execute("SELECT COUNT(*) FROM ingresos WHERE patente=? AND hora_salida IS NULL", (patente,))                if c.fetchone()[0] > 0:                    conn.close()                    messagebox.showwarning("Advertencia", f"El veh√≠culo {patente} ya est√° en el estacionamiento")                    return                hora_ingreso = datetime.now().strftime("%Y-%m-%d %H:%M:%S")                dia_trabajo = datetime.now().strftime("%Y-%m-%d")                c.execute("INSERT INTO ingresos (patente, hora_ingreso, dia_trabajo) VALUES (?, ?, ?)",                          (patente, hora_ingreso, dia_trabajo))                conn.commit()                conn.close()                messagebox.showinfo("‚úÖ √âxito", f"Veh√≠culo {patente} ingresado correctamente")                entry_patente.delete(0, "end")                mostrar_tabla()            else:                messagebox.showwarning("‚ö†Ô∏è Advertencia", "Por favor ingrese una patente v√°lida")        btn_ingresar = ctk.CTkButton(            frame_form,            text="‚úÖ Registrar Ingreso",            command=registrar_ingreso,            font=("Arial", 14, "bold"),            fg_color="#4CAF50",            hover_color="#388E3C",            height=35        )        btn_ingresar.grid(row=0, column=2, padx=20, pady=15)        # Tabla de veh√≠culos actuales        tabla_frame = ctk.CTkFrame(self.frame_actual, corner_radius=15)        tabla_frame.grid(row=2, column=0, sticky="nsew", padx=20, pady=10)        tabla_frame.grid_rowconfigure(1, weight=1)        tabla_frame.grid_columnconfigure(0, weight=1)        ctk.CTkLabel(tabla_frame, text="Veh√≠culos en el Estacionamiento", font=("Arial", 20, "bold")).grid(row=0,                                                                                                           column=0,                                                                                                           pady=10)        cols = ("Patente", "Hora de Ingreso")        tabla = ttk.Treeview(tabla_frame, columns=cols, show="headings", height=7)        for col in cols:            tabla.heading(col, text=col)            tabla.column(col, width=200, anchor="center")        scrollbar = ttk.Scrollbar(tabla_frame, orient="vertical", command=tabla.yview)        tabla.configure(yscrollcommand=scrollbar.set)        tabla.grid(row=1, column=0, sticky="nsew", padx=20, pady=(0, 10))        scrollbar.grid(row=1, column=1, sticky="ns", pady=(0, 10))        def mostrar_tabla():            for row in tabla.get_children():                tabla.delete(row)            conn = sqlite3.connect("estacionamiento.db")            c = conn.cursor()            c.execute("SELECT patente, hora_ingreso FROM ingresos WHERE hora_salida IS NULL ORDER BY hora_ingreso DESC")            for row in c.fetchall():                # Formatear fecha para mostrar                fecha_formateada = datetime.strptime(row[1], "%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y %H:%M")                tabla.insert("", "end", values=(row[0], fecha_formateada))            conn.close()        mostrar_tabla()        # Bot√≥n volver        ctk.CTkButton(            self.frame_actual,            text="üè† Volver al Men√∫ Principal",            command=self.mostrar_menu_principal,            font=("Arial", 16, "bold"),            fg_color="#607D8B",            hover_color="#455A64",            height=40        ).grid(row=3, column=0, pady=20)        # Bind Enter key para registrar        entry_patente.bind("<Return>", lambda e: registrar_ingreso())    # ---------------------- Egreso ----------------------    def mostrar_egreso(self):        # Verificar d√≠a iniciado        if not verificar_dia_iniciado():            messagebox.showwarning("D√≠a no iniciado", "Debe iniciar el d√≠a de trabajo antes de registrar egresos")            return        self.limpiar_frame()        self.frame_actual = ctk.CTkFrame(self.root, corner_radius=0, fg_color="#f8f9fa")        self.frame_actual.grid(row=0, column=0, sticky="nsew", padx=20, pady=20)        self.frame_actual.grid_columnconfigure(0, weight=1)        ctk.CTkLabel(            self.frame_actual,            text="üöó‚Üí Egreso de Veh√≠culos",            font=("Arial", 32, "bold"),            text_color="#2c3e50"        ).grid(row=0, column=0, pady=20)        # Frame de b√∫squeda        frame_busqueda = ctk.CTkFrame(self.frame_actual, corner_radius=15)        frame_busqueda.grid(row=1, column=0, pady=10, padx=20, sticky="ew")        frame_busqueda.grid_columnconfigure(1, weight=1)        ctk.CTkLabel(frame_busqueda, text="Patente:", font=("Arial", 16)).grid(row=0, column=0, padx=20, pady=15,                                                                               sticky="w")        entry_patente = ctk.CTkEntry(frame_busqueda, font=("Arial", 14), height=35)        entry_patente.grid(row=0, column=1, padx=10, pady=15, sticky="ew")        # Frame de informaci√≥n        info_frame = ctk.CTkFrame(self.frame_actual, corner_radius=15)        info_frame.grid(row=2, column=0, pady=10, padx=20, sticky="ew")        salida_info = ctk.CTkLabel(            info_frame,            text="Ingrese una patente para buscar el veh√≠culo",            font=("Arial", 16),            wraplength=600        )        salida_info.pack(pady=20)        btn_finalizar = None        def buscar_patente():            nonlocal btn_finalizar            patente = entry_patente.get().upper().strip()            if not patente:                salida_info.configure(text="‚ö†Ô∏è Por favor ingrese una patente")                return            conn = sqlite3.connect("estacionamiento.db")            c = conn.cursor()            c.execute("SELECT id, hora_ingreso FROM ingresos WHERE patente=? AND hora_salida IS NULL", (patente,))            result = c.fetchone()            conn.close()            if btn_finalizar:                btn_finalizar.destroy()                btn_finalizar = None            if result:                ingreso_id, hora_ingreso = result                hora_ingreso_dt = datetime.strptime(hora_ingreso, "%Y-%m-%d %H:%M:%S")                hora_salida_dt = datetime.now()                tiempo = hora_salida_dt - hora_ingreso_dt                horas = max(1, tiempo.total_seconds() / 3600)  # M√≠nimo 1 hora                tarifa_hora = get_config()[0]                monto = round(horas * tarifa_hora, 2)                tiempo_str = str(tiempo).split('.')[0]                info_text = f"""‚úÖ Veh√≠culo Encontradoüöó Patente: {patente}üìÖ Ingreso: {hora_ingreso_dt.strftime('%d/%m/%Y %H:%M:%S')}‚è∞ Salida: {hora_salida_dt.strftime('%d/%m/%Y %H:%M:%S')}‚è±Ô∏è Tiempo: {tiempo_str}üí∞ Monto a pagar: ${monto:,.2f}"""                salida_info.configure(text=info_text)                def finalizar_turno():                    conn = sqlite3.connect("estacionamiento.db")                    c = conn.cursor()                    c.execute("UPDATE ingresos SET hora_salida=?, monto=? WHERE id=?",                              (hora_salida_dt.strftime("%Y-%m-%d %H:%M:%S"), monto, ingreso_id))                    conn.commit()                    conn.close()                    messagebox.showinfo("‚úÖ Turno Finalizado",                                        f"Veh√≠culo {patente} egresado correctamente.\nMonto cobrado: ${monto:,.2f}")                    entry_patente.delete(0, "end")                    salida_info.configure(text="Ingrese una patente para buscar el veh√≠culo")                btn_finalizar = ctk.CTkButton(                    info_frame,                    text="üí∞ Finalizar y Cobrar",                    command=finalizar_turno,                    font=("Arial", 16, "bold"),                    fg_color="#4CAF50",                    hover_color="#388E3C",                    height=40                )                btn_finalizar.pack(pady=10)            else:                salida_info.configure(text="‚ùå Patente no encontrada o el veh√≠culo ya egres√≥")        btn_buscar = ctk.CTkButton(            frame_busqueda,            text="üîç Buscar",            command=buscar_patente,            font=("Arial", 14, "bold"),            fg_color="#2196F3",            hover_color="#1976D2",            height=35        )        btn_buscar.grid(row=0, column=2, padx=20, pady=15)        ctk.CTkButton(            self.frame_actual,            text="üè† Volver al Men√∫ Principal",            command=self.mostrar_menu_principal,            font=("Arial", 16, "bold"),            fg_color="#607D8B",            hover_color="#455A64",            height=40        ).grid(row=3, column=0, pady=20)        # Bind Enter key        entry_patente.bind("<Return>", lambda e: buscar_patente())    # ---------------------- Mensuales ----------------------    def mostrar_mensuales(self):        self.limpiar_frame()        self.frame_actual = ctk.CTkFrame(self.root, corner_radius=0, fg_color="#f8f9fa")        self.frame_actual.grid(row=0, column=0, sticky="nsew", padx=20, pady=20)        self.frame_actual.grid_rowconfigure(2, weight=1)        self.frame_actual.grid_columnconfigure(0, weight=1)        ctk.CTkLabel(            self.frame_actual,            text="üÖøÔ∏è Clientes Mensuales",            font=("Arial", 32, "bold"),            text_color="#2c3e50"        ).grid(row=0, column=0, pady=20)        # Bot√≥n para agregar nuevo        btn_frame = ctk.CTkFrame(self.frame_actual, fg_color="transparent")        btn_frame.grid(row=1, column=0, pady=10)        ctk.CTkButton(            btn_frame,            text="‚ûï Agregar Nuevo Cliente",            command=self.mostrar_form_mensual,            font=("Arial", 16, "bold"),            fg_color="#4CAF50",            hover_color="#388E3C",            height=40        ).pack()        # Frame de la tabla        tabla_frame = ctk.CTkFrame(self.frame_actual, corner_radius=15)        tabla_frame.grid(row=2, column=0, sticky="nsew", padx=20, pady=10)        tabla_frame.grid_rowconfigure(0, weight=1)        tabla_frame.grid_columnconfigure(0, weight=1)        # Crear Treeview personalizado con bot√≥n eliminar        style = ttk.Style()        # Frame contenedor para tabla y scrollbars        container_frame = ctk.CTkFrame(tabla_frame, fg_color="transparent")        container_frame.grid(row=0, column=0, sticky="nsew", padx=20, pady=20)        container_frame.grid_rowconfigure(0, weight=1)        container_frame.grid_columnconfigure(0, weight=1)        cols = ("ID", "Patente", "Apellido", "Nombre", "Tel√©fono", "Fecha Ingreso", "Acciones")        self.tabla_mensuales = ttk.Treeview(container_frame, columns=cols, show="headings", height=9)        # Configurar columnas        self.tabla_mensuales.heading("ID", text="ID")        self.tabla_mensuales.column("ID", width=50, anchor="center")        self.tabla_mensuales.heading("Patente", text="Patente")        self.tabla_mensuales.column("Patente", width=100, anchor="center")        self.tabla_mensuales.heading("Apellido", text="Apellido")        self.tabla_mensuales.column("Apellido", width=120, anchor="center")        self.tabla_mensuales.heading("Nombre", text="Nombre")        self.tabla_mensuales.column("Nombre", width=120, anchor="center")        self.tabla_mensuales.heading("Tel√©fono", text="Tel√©fono")        self.tabla_mensuales.column("Tel√©fono", width=120, anchor="center")        self.tabla_mensuales.heading("Fecha Ingreso", text="Fecha Ingreso")        self.tabla_mensuales.column("Fecha Ingreso", width=120, anchor="center")        self.tabla_mensuales.heading("Acciones", text="Acciones")        self.tabla_mensuales.column("Acciones", width=100, anchor="center")        scrollbar_y = ttk.Scrollbar(container_frame, orient="vertical", command=self.tabla_mensuales.yview)        scrollbar_x = ttk.Scrollbar(container_frame, orient="horizontal", command=self.tabla_mensuales.xview)        self.tabla_mensuales.configure(yscrollcommand=scrollbar_y.set, xscrollcommand=scrollbar_x.set)        self.tabla_mensuales.grid(row=0, column=0, sticky="nsew")        scrollbar_y.grid(row=0, column=1, sticky="ns")        scrollbar_x.grid(row=1, column=0, sticky="ew")        ctk.CTkButton(            self.frame_actual,            text="üè† Volver al Men√∫ Principal",            command=self.mostrar_menu_principal,            font=("Arial", 16, "bold"),            fg_color="#607D8B",            hover_color="#455A64",            height=40        ).grid(row=3, column=0, pady=20)        # Bind doble click para eliminar        self.tabla_mensuales.bind("<Double-1>", self.eliminar_mensual)        def mostrar_tabla():            for row in self.tabla_mensuales.get_children():                self.tabla_mensuales.delete(row)            conn = sqlite3.connect("estacionamiento.db")            c = conn.cursor()            c.execute("SELECT id, patente, apellido, nombre, telefono, fecha_ingreso FROM mensuales ORDER BY apellido")            for row in c.fetchall():                fecha_formatted = "No especificada"                if row[5]:                    try:                        fecha_formatted = datetime.strptime(row[5], "%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y")                    except:                        fecha_formatted = row[5]                self.tabla_mensuales.insert("", "end", values=(*row[:5], fecha_formatted, "üóëÔ∏è Eliminar"))            conn.close()        self.mostrar_tabla_mensuales = mostrar_tabla        mostrar_tabla()        # Instrucciones        ctk.CTkLabel(            tabla_frame,            text="üí° Haga doble clic en una fila para eliminar un cliente",            font=("Arial", 12),            text_color="#666666"        ).grid(row=1, column=0, pady=5)    def eliminar_mensual(self, event):        """Eliminar cliente mensual seleccionado"""        selection = self.tabla_mensuales.selection()        if not selection:            return        item = self.tabla_mensuales.item(selection[0])        cliente_id = item['values'][0]        apellido = item['values'][2]        nombre = item['values'][3]        patente = item['values'][1]        respuesta = messagebox.askyesno(            "Confirmar Eliminaci√≥n",            f"¬øEst√° seguro de eliminar el cliente?\n\n"            f"Nombre: {nombre} {apellido}\n"            f"Patente: {patente}\n\n"            f"Esta acci√≥n no se puede deshacer."        )        if respuesta:            conn = sqlite3.connect("estacionamiento.db")            c = conn.cursor()            c.execute("DELETE FROM mensuales WHERE id=?", (cliente_id,))            conn.commit()            conn.close()            messagebox.showinfo("‚úÖ Eliminado", f"Cliente {nombre} {apellido} eliminado correctamente")            self.mostrar_tabla_mensuales()    def mostrar_form_mensual(self):        """Mostrar formulario para agregar cliente mensual"""        form_window = ctk.CTkToplevel(self.root)        form_window.title("Agregar Cliente Mensual")        form_window.geometry("600x700")        form_window.resizable(False, False)        # Centrar ventana        form_window.transient(self.root)        form_window.grab_set()        # Frame principal        main_frame = ctk.CTkFrame(form_window, corner_radius=15)        main_frame.pack(expand=True, fill="both", padx=20, pady=20)        ctk.CTkLabel(            main_frame,            text="‚ûï Nuevo Cliente Mensual",            font=("Arial", 24, "bold"),            text_color="#2c3e50"        ).pack(pady=20)        # Frame del formulario        form_frame = ctk.CTkFrame(main_frame, corner_radius=10)        form_frame.pack(expand=True, fill="both", padx=20, pady=10)        # Campos del formulario        campos = [            ("üë§ Nombre:", "nombre"),            ("üë§ Apellido:", "apellido"),            ("üè† Direcci√≥n:", "direccion"),            ("üìû Tel√©fono:", "telefono"),            ("üöó Marca:", "marca"),            ("üöô Modelo:", "modelo"),            ("üî¢ Patente:", "patente")        ]        entries = {}        for i, (label, key) in enumerate(campos):            ctk.CTkLabel(                form_frame,                text=label,                font=("Arial", 14)            ).grid(row=i, column=0, padx=20, pady=10, sticky="w")            entry = ctk.CTkEntry(                form_frame,                font=("Arial", 12),                height=35,                width=250            )            entry.grid(row=i, column=1, padx=20, pady=10, sticky="ew")            entries[key] = entry        # Campo de fecha        ctk.CTkLabel(            form_frame,            text="üìÖ Fecha de Ingreso:",            font=("Arial", 14)        ).grid(row=len(campos), column=0, padx=20, pady=10, sticky="w")        fecha_frame = ctk.CTkFrame(form_frame, fg_color="transparent")        fecha_frame.grid(row=len(campos), column=1, padx=20, pady=10, sticky="ew")        entry_fecha = ctk.CTkEntry(            fecha_frame,            font=("Arial", 12),            height=35        )        entry_fecha.pack(side="left", expand=True, fill="x")        # Poner fecha actual por defecto        fecha_actual = datetime.now().strftime("%d/%m/%Y %H:%M")        entry_fecha.insert(0, fecha_actual)        def usar_fecha_actual():            entry_fecha.delete(0, "end")            entry_fecha.insert(0, datetime.now().strftime("%d/%m/%Y %H:%M"))        ctk.CTkButton(            fecha_frame,            text="üìÖ Ahora",            command=usar_fecha_actual,            width=80,            height=35,            font=("Arial", 12)        ).pack(side="right", padx=(10, 0))        form_frame.grid_columnconfigure(1, weight=1)        def clear_form():            for entry in entries.values():                entry.delete(0, "end")            usar_fecha_actual()            entries['nombre'].focus()        def guardar_cliente():            # Validar campos obligatorios            campos_requeridos = ['nombre', 'apellido', 'patente']            for campo in campos_requeridos:                if not entries[campo].get().strip():                    messagebox.showerror("Error", f"El campo {campo} es obligatorio")                    entries[campo].focus()                    return            # Validar patente √∫nica            patente = entries['patente'].get().upper().strip()            conn = sqlite3.connect("estacionamiento.db")            c = conn.cursor()            c.execute("SELECT COUNT(*) FROM mensuales WHERE patente=?", (patente,))            if c.fetchone()[0] > 0:                conn.close()                messagebox.showerror("Error", f"Ya existe un cliente con la patente {patente}")                return            # Procesar fecha            try:                fecha_str = entry_fecha.get().strip()                if "/" in fecha_str and ":" in fecha_str:                    # Formato DD/MM/YYYY HH:MM                    fecha_obj = datetime.strptime(fecha_str, "%d/%m/%Y %H:%M")                elif "/" in fecha_str:                    # Formato DD/MM/YYYY                    fecha_obj = datetime.strptime(fecha_str, "%d/%m/%Y")                else:                    raise ValueError("Formato de fecha inv√°lido")                fecha_db = fecha_obj.strftime("%Y-%m-%d %H:%M:%S")            except ValueError:                messagebox.showerror("Error", "Formato de fecha inv√°lido. Use DD/MM/YYYY o DD/MM/YYYY HH:MM")                return            # Guardar en base de datos            try:                c.execute("""INSERT INTO mensuales                             (nombre, apellido, direccion, telefono, marca, modelo, patente, fecha_ingreso)                             VALUES (?, ?, ?, ?, ?, ?, ?, ?)""",                          (entries['nombre'].get().strip(),                           entries['apellido'].get().strip(),                           entries['direccion'].get().strip(),                           entries['telefono'].get().strip(),                           entries['marca'].get().strip(),                           entries['modelo'].get().strip(),                           patente,                           fecha_db))                conn.commit()                conn.close()                messagebox.showinfo("‚úÖ √âxito",                                    f"Cliente {entries['nombre'].get()} {entries['apellido'].get()} agregado correctamente")                clear_form()                self.mostrar_tabla_mensuales()            except Exception as e:                messagebox.showerror("Error", f"Error al guardar: {str(e)}")        def cancelar():            form_window.destroy()        # Frame de botones        buttons_frame = ctk.CTkFrame(main_frame, fg_color="transparent")        buttons_frame.pack(pady=20)        ctk.CTkButton(            buttons_frame,            text="üíæ Guardar Nuevo Auto",            command=guardar_cliente,            font=("Arial", 14, "bold"),            fg_color="#4CAF50",            hover_color="#388E3C",            height=40,            width=150        ).pack(side="left", padx=10)        ctk.CTkButton(            buttons_frame,            text="‚ùå Cerrar la Pesta√±a",            command=cancelar,            font=("Arial", 14, "bold"),            fg_color="#f44336",            hover_color="#d32f2f",            height=40,            width=150        ).pack(side="right", padx=10)        # Focus en primer campo        entries['nombre'].focus()    # ---------------------- Facturaci√≥n ----------------------    def mostrar_facturacion(self):        self.limpiar_frame()        self.frame_actual = ctk.CTkFrame(self.root, corner_radius=0, fg_color="#f8f9fa")        self.frame_actual.grid(row=0, column=0, sticky="nsew", padx=20, pady=20)        self.frame_actual.grid_rowconfigure(2, weight=1)        self.frame_actual.grid_columnconfigure(0, weight=1)        ctk.CTkLabel(            self.frame_actual,            text="üßæ Facturaci√≥n",            font=("Arial", 32, "bold"),            text_color="#2c3e50"        ).grid(row=0, column=0, pady=20)        # Frame de filtros        frame_filtro = ctk.CTkFrame(self.frame_actual, corner_radius=15)        frame_filtro.grid(row=1, column=0, pady=10, padx=20, sticky="ew")        frame_filtro.grid_columnconfigure((0, 1, 2), weight=1)        ctk.CTkLabel(frame_filtro, text="Filtrar por fecha:", font=("Arial", 16, "bold")).grid(row=0, column=0,                                                                                               columnspan=3, pady=5)        entry_fecha = ctk.CTkEntry(frame_filtro, placeholder_text="Fecha espec√≠fica (DD/MM/YYYY)", font=("Arial", 12))        entry_fecha.grid(row=1, column=0, padx=10, pady=15, sticky="ew")        entry_desde = ctk.CTkEntry(frame_filtro, placeholder_text="Desde (DD/MM/YYYY)", font=("Arial", 12))        entry_desde.grid(row=1, column=1, padx=10, pady=15, sticky="ew")        entry_hasta = ctk.CTkEntry(frame_filtro, placeholder_text="Hasta (DD/MM/YYYY)", font=("Arial", 12))        entry_hasta.grid(row=1, column=2, padx=10, pady=15, sticky="ew")        # Frame de la tabla        tabla_frame = ctk.CTkFrame(self.frame_actual, corner_radius=15)        tabla_frame.grid(row=2, column=0, sticky="nsew", padx=20, pady=10)        tabla_frame.grid_rowconfigure(0, weight=1)        tabla_frame.grid_columnconfigure(0, weight=1)        cols = ("Fecha", "Patente", "Ingreso", "Salida", "Tiempo", "Monto")        tabla = ttk.Treeview(tabla_frame, columns=cols, show="headings", height=8)        for col in cols:            tabla.heading(col, text=col)            if col == "Monto":                tabla.column(col, width=100, anchor="center")            elif col == "Tiempo":                tabla.column(col, width=120, anchor="center")            else:                tabla.column(col, width=130, anchor="center")        scrollbar_y = ttk.Scrollbar(tabla_frame, orient="vertical", command=tabla.yview)        scrollbar_x = ttk.Scrollbar(tabla_frame, orient="horizontal", command=tabla.xview)        tabla.configure(yscrollcommand=scrollbar_y.set, xscrollcommand=scrollbar_x.set)        tabla.grid(row=0, column=0, sticky="nsew", padx=20, pady=20)        scrollbar_y.grid(row=0, column=1, sticky="ns", pady=20)        scrollbar_x.grid(row=1, column=0, sticky="ew", padx=20)        # Frame de resumen        resumen_frame = ctk.CTkFrame(self.frame_actual, corner_radius=15)        resumen_frame.grid(row=3, column=0, pady=10, padx=20, sticky="ew")        resumen_label = ctk.CTkLabel(            resumen_frame,            text="üìä Seleccione un rango de fechas para ver la facturaci√≥n",            font=("Arial", 16),            text_color="#2c3e50"        )        resumen_label.pack(pady=15)        def buscar_facturacion():            for row in tabla.get_children():                tabla.delete(row)            query = "SELECT patente, hora_ingreso, hora_salida, monto FROM ingresos WHERE hora_salida IS NOT NULL"            params = []            # Filtros de fecha            if entry_fecha.get().strip():                try:                    fecha = datetime.strptime(entry_fecha.get().strip(), "%d/%m/%Y").strftime("%Y-%m-%d")                    query += " AND date(hora_salida) = ?"                    params.append(fecha)                except ValueError:                    messagebox.showerror("Error", "Formato de fecha espec√≠fica inv√°lido. Use DD/MM/YYYY")                    return            else:                if entry_desde.get().strip():                    try:                        fecha_desde = datetime.strptime(entry_desde.get().strip(), "%d/%m/%Y").strftime("%Y-%m-%d")                        query += " AND date(hora_salida) >= ?"                        params.append(fecha_desde)                    except ValueError:                        messagebox.showerror("Error", "Formato de fecha 'desde' inv√°lido. Use DD/MM/YYYY")                        return                if entry_hasta.get().strip():                    try:                        fecha_hasta = datetime.strptime(entry_hasta.get().strip(), "%d/%m/%Y").strftime("%Y-%m-%d")                        query += " AND date(hora_salida) <= ?"                        params.append(fecha_hasta)                    except ValueError:                        messagebox.showerror("Error", "Formato de fecha 'hasta' inv√°lido. Use DD/MM/YYYY")                        return            query += " ORDER BY hora_salida DESC"            conn = sqlite3.connect("estacionamiento.db")            c = conn.cursor()            total_recaudado = 0            total_vehiculos = 0            fechas_resumen = set()            for row in c.execute(query, params):                patente, ingreso, salida, monto = row                # Formatear fechas                fecha_salida = datetime.strptime(salida, "%Y-%m-%d %H:%M:%S")                fecha_str = fecha_salida.strftime("%d/%m/%Y")                ingreso_fmt = datetime.strptime(ingreso, "%Y-%m-%d %H:%M:%S").strftime("%d/%m %H:%M")                salida_fmt = fecha_salida.strftime("%d/%m %H:%M")                # Calcular tiempo                tiempo_delta = datetime.strptime(salida, "%Y-%m-%d %H:%M:%S") - datetime.strptime(ingreso,                                                                                                  "%Y-%m-%d %H:%M:%S")                tiempo_str = str(tiempo_delta).split('.')[0]                tabla.insert("", "end",                             values=(fecha_str, patente, ingreso_fmt, salida_fmt, tiempo_str, f"${monto:,.2f}"))                total_recaudado += monto                total_vehiculos += 1                fechas_resumen.add(fecha_str)            conn.close()            # Mostrar resumen            if total_vehiculos > 0:                if len(fechas_resumen) == 1:                    fecha_texto = f"Fecha: {list(fechas_resumen)[0]}"                else:                    fecha_texto = f"Per√≠odo: {len(fechas_resumen)} d√≠as"                resumen_text = f"""üí∞ RESUMEN DE FACTURACI√ìN{fecha_texto}üöó Total veh√≠culos: {total_vehiculos}üíµ Total recaudado: ${total_recaudado:,.2f}üìä Promedio por veh√≠culo: ${(total_recaudado / total_vehiculos):,.2f}"""                resumen_label.configure(text=resumen_text)            else:                resumen_label.configure(text="‚ùå No se encontraron registros para el per√≠odo seleccionado")        # Botones de acci√≥n        buttons_frame = ctk.CTkFrame(frame_filtro, fg_color="transparent")        buttons_frame.grid(row=2, column=0, columnspan=3, pady=10)        ctk.CTkButton(            buttons_frame,            text="üîç Buscar Facturaci√≥n",            command=buscar_facturacion,            font=("Arial", 14, "bold"),            fg_color="#2196F3",            hover_color="#1976D2",            width=150        ).pack(side="left", padx=10)        def facturacion_hoy():            entry_fecha.delete(0, "end")            entry_desde.delete(0, "end")            entry_hasta.delete(0, "end")            entry_fecha.insert(0, datetime.now().strftime("%d/%m/%Y"))            buscar_facturacion()        ctk.CTkButton(            buttons_frame,            text="üìÖ Facturaci√≥n de Hoy",            command=facturacion_hoy,            font=("Arial", 14, "bold"),            fg_color="#4CAF50",            hover_color="#388E3C",            width=150        ).pack(side="right", padx=10)        # Cargar facturaci√≥n de hoy por defecto        facturacion_hoy()        # Bot√≥n volver al men√∫ principal        ctk.CTkButton(            self.frame_actual,            text="üè† Volver al Men√∫ Principal",            command=self.mostrar_menu_principal,            font=("Arial", 16, "bold"),            fg_color="#607D8B",            hover_color="#455A64",            height=40        ).grid(row=4, column=0, pady=20)    # ---------------------- Historial ----------------------    def mostrar_historial(self):        self.limpiar_frame()        self.frame_actual = ctk.CTkFrame(self.root, corner_radius=0, fg_color="#f8f9fa")        self.frame_actual.grid(row=0, column=0, sticky="nsew", padx=20, pady=20)        self.frame_actual.grid_rowconfigure(2, weight=1)        self.frame_actual.grid_columnconfigure(0, weight=1)        ctk.CTkLabel(            self.frame_actual,            text="üìä Historial de Veh√≠culos",            font=("Arial", 32, "bold"),            text_color="#2c3e50"        ).grid(row=0, column=0, pady=20)        # Frame de filtros        frame_filtro = ctk.CTkFrame(self.frame_actual, corner_radius=15)        frame_filtro.grid(row=1, column=0, pady=10, padx=20, sticky="ew")        frame_filtro.grid_columnconfigure((0, 1, 2, 3), weight=1)        entry_patente = ctk.CTkEntry(frame_filtro, placeholder_text="Patente", font=("Arial", 12))        entry_patente.grid(row=0, column=0, padx=10, pady=15, sticky="ew")        entry_desde = ctk.CTkEntry(frame_filtro, placeholder_text="Desde (DD/MM/YYYY)", font=("Arial", 12))        entry_desde.grid(row=0, column=1, padx=10, pady=15, sticky="ew")        entry_hasta = ctk.CTkEntry(frame_filtro, placeholder_text="Hasta (DD/MM/YYYY)", font=("Arial", 12))        entry_hasta.grid(row=0, column=2, padx=10, pady=15, sticky="ew")        # Frame de la tabla        tabla_frame = ctk.CTkFrame(self.frame_actual, corner_radius=15)        tabla_frame.grid(row=2, column=0, sticky="nsew", padx=20, pady=10)        tabla_frame.grid_rowconfigure(0, weight=1)        tabla_frame.grid_columnconfigure(0, weight=1)        cols = ("Patente", "Ingreso", "Salida", "Tiempo", "Monto")        tabla = ttk.Treeview(tabla_frame, columns=cols, show="headings")        for col in cols:            tabla.heading(col, text=col)            if col == "Monto":                tabla.column(col, width=100, anchor="center")            else:                tabla.column(col, width=150, anchor="center")        scrollbar_y = ttk.Scrollbar(tabla_frame, orient="vertical", command=tabla.yview)        scrollbar_x = ttk.Scrollbar(tabla_frame, orient="horizontal", command=tabla.xview)        tabla.configure(yscrollcommand=scrollbar_y.set, xscrollcommand=scrollbar_x.set)        tabla.grid(row=0, column=0, sticky="nsew", padx=20, pady=20)        scrollbar_y.grid(row=0, column=1, sticky="ns", pady=20)        scrollbar_x.grid(row=1, column=0, sticky="ew", padx=20)        def buscar():            for row in tabla.get_children():                tabla.delete(row)            query = "SELECT patente, hora_ingreso, hora_salida, monto FROM ingresos WHERE hora_salida IS NOT NULL"            params = []            if entry_patente.get().strip():                query += " AND patente LIKE ?"                params.append("%" + entry_patente.get().upper().strip() + "%")            # Convertir fechas DD/MM/YYYY a YYYY-MM-DD            if entry_desde.get().strip():                try:                    fecha_desde = datetime.strptime(entry_desde.get().strip(), "%d/%m/%Y").strftime("%Y-%m-%d")                    query += " AND date(hora_ingreso) >= ?"                    params.append(fecha_desde)                except ValueError:                    messagebox.showerror("Error", "Formato de fecha incorrecto. Use DD/MM/YYYY")                    return            if entry_hasta.get().strip():                try:                    fecha_hasta = datetime.strptime(entry_hasta.get().strip(), "%d/%m/%Y").strftime("%Y-%m-%d")                    query += " AND date(hora_salida) <= ?"                    params.append(fecha_hasta)                except ValueError:                    messagebox.showerror("Error", "Formato de fecha incorrecto. Use DD/MM/YYYY")                    return            query += " ORDER BY hora_salida DESC"            conn = sqlite3.connect("estacionamiento.db")            c = conn.cursor()            total_recaudado = 0            for row in c.execute(query, params):                patente, ingreso, salida, monto = row                # Formatear fechas                ingreso_fmt = datetime.strptime(ingreso, "%Y-%m-%d %H:%M:%S").strftime("%d/%m %H:%M")                salida_fmt = datetime.strptime(salida, "%Y-%m-%d %H:%M:%S").strftime("%d/%m %H:%M")                # Calcular tiempo                tiempo_delta = datetime.strptime(salida, "%Y-%m-%d %H:%M:%S") - datetime.strptime(ingreso,                                                                                                  "%Y-%m-%d %H:%M:%S")                tiempo_str = str(tiempo_delta).split('.')[0]                tabla.insert("", "end", values=(patente, ingreso_fmt, salida_fmt, tiempo_str, f"${monto:,.2f}"))                total_recaudado += monto            conn.close()            # Adaptar la altura de la tabla al n√∫mero de filas (m√°ximo 20 visibles)            num_rows = len(tabla.get_children())            new_height = min(20, num_rows) if num_rows > 0 else 5            tabla.config(height=new_height)            # Mostrar total recaudado            messagebox.showinfo("Resumen",                                f"Total encontrado: {len(tabla.get_children())} registros\nTotal recaudado: ${total_recaudado:,.2f}")        btn_buscar = ctk.CTkButton(            frame_filtro,            text="üîç Buscar",            command=buscar,            font=("Arial", 14, "bold"),            fg_color="#2196F3",            hover_color="#1976D2"        )        btn_buscar.grid(row=0, column=3, padx=10, pady=15, sticky="ew")        # Bot√≥n volver al men√∫ principal        ctk.CTkButton(            self.frame_actual,            text="üè† Volver al Men√∫ Principal",            command=self.mostrar_menu_principal,            font=("Arial", 16, "bold"),            fg_color="#607D8B",            hover_color="#455A64",            height=40        ).grid(row=3, column=0, pady=20)        # Cargar todos los registros al inicio        buscar()    # ---------------------- Configuraci√≥n ----------------------    def mostrar_configuracion(self):        self.limpiar_frame()        self.frame_actual = ctk.CTkFrame(self.root, corner_radius=0, fg_color="#f8f9fa")        self.frame_actual.grid(row=0, column=0, sticky="nsew", padx=20, pady=20)        self.frame_actual.grid_columnconfigure(0, weight=1)        ctk.CTkLabel(            self.frame_actual,            text="‚öôÔ∏è Configuraci√≥n del Sistema",            font=("Arial", 32, "bold"),            text_color="#2c3e50"        ).grid(row=0, column=0, pady=20)        # Frame principal de configuraci√≥n        config_frame = ctk.CTkFrame(self.frame_actual, corner_radius=15)        config_frame.grid(row=1, column=0, pady=10, padx=20, sticky="ew")        config_frame.grid_columnconfigure(1, weight=1)        # Secci√≥n de tarifas        ctk.CTkLabel(            config_frame,            text="üí∞ CONFIGURACI√ìN DE TARIFAS",            font=("Arial", 18, "bold"),            text_color="#2c3e50"        ).grid(row=0, column=0, columnspan=2, pady=15)        config = get_config()        labels_config = [            ("üíµ Tarifa por hora ($):", 0),            ("üìÖ Tarifa por d√≠a ($):", 1),            ("üìÜ Tarifa por semana ($):", 2),            ("üóìÔ∏è Tarifa por mes ($):", 3),        ]        entries = []        for i, (label_text, config_index) in enumerate(labels_config):            ctk.CTkLabel(                config_frame,                text=label_text,                font=("Arial", 16)            ).grid(row=i + 1, column=0, padx=20, pady=10, sticky="w")            entry = ctk.CTkEntry(                config_frame,                font=("Arial", 14),                height=35            )            entry.insert(0, str(config[config_index]))            entry.grid(row=i + 1, column=1, padx=20, pady=10, sticky="ew")            entries.append(entry)        # Separador        separator = ctk.CTkFrame(config_frame, height=2, fg_color="#e0e0e0")        separator.grid(row=6, column=0, columnspan=2, sticky="ew", padx=20, pady=15)        # Secci√≥n de estacionamiento        ctk.CTkLabel(            config_frame,            text="üÖøÔ∏è CONFIGURACI√ìN DEL ESTACIONAMIENTO",            font=("Arial", 18, "bold"),            text_color="#2c3e50"        ).grid(row=7, column=0, columnspan=2, pady=15)        ctk.CTkLabel(            config_frame,            text="üöó Total de cocheras:",            font=("Arial", 16)        ).grid(row=8, column=0, padx=20, pady=10, sticky="w")        entry_cocheras = ctk.CTkEntry(            config_frame,            font=("Arial", 14),            height=35        )        entry_cocheras.insert(0, str(config[4]))        entry_cocheras.grid(row=8, column=1, padx=20, pady=10, sticky="ew")        entries.append(entry_cocheras)        def guardar_configuracion():            try:                valores = []                # Validar entradas                for i, entry in enumerate(entries):                    if i < 4:  # Tarifas (float)                        valor = float(entry.get())                        if valor <= 0:                            raise ValueError(f"Las tarifas deben ser mayores a 0")                        valores.append(valor)                    else:  # Cocheras (int)                        valor = int(entry.get())                        if valor <= 0:                            raise ValueError("El n√∫mero de cocheras debe ser mayor a 0")                        valores.append(valor)                conn = sqlite3.connect("estacionamiento.db")                c = conn.cursor()                c.execute("""UPDATE configuracion                             SET tarifa_hora=?,                                 tarifa_dia=?,                                 tarifa_semana=?,                                 tarifa_mes=?,                                 cocheras_totales=?                             WHERE id = 1""", valores)                conn.commit()                conn.close()                messagebox.showinfo("‚úÖ √âxito", "Configuraci√≥n guardada correctamente")                self.mostrar_menu_principal()            except ValueError as e:                messagebox.showerror("‚ùå Error", f"Error en los datos ingresados:\n{str(e)}")        # Frame de botones        buttons_frame = ctk.CTkFrame(self.frame_actual, fg_color="transparent")        buttons_frame.grid(row=2, column=0, pady=20)        ctk.CTkButton(            buttons_frame,            text="üíæ Guardar Configuraci√≥n",            command=guardar_configuracion,            font=("Arial", 16, "bold"),            fg_color="#4CAF50",            hover_color="#388E3C",            height=40,            width=200        ).grid(row=0, column=0, padx=10)        ctk.CTkButton(            buttons_frame,            text="üè† Volver al Men√∫",            command=self.mostrar_menu_principal,            font=("Arial", 16, "bold"),            fg_color="#607D8B",            hover_color="#455A64",            height=40,            width=200        ).grid(row=0, column=1, padx=10)# ---------------------- Main ----------------------if __name__ == "__main__":    init_db()    root = ctk.CTk()    app = EstacionamientoApp(root)    root.mainloop()    root.mainloop()